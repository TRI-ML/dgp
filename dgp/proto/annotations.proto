// Copyright 2019-2021 Toyota Research Institute.  All rights reserved.
// Definitions for annotation types for images and point clouds

syntax = "proto3";

import "dgp/proto/geometry.proto";

package dgp.proto;

// Generic Annotation Enumeration.
// Annotations will be available under the corresponding enum name.
//
// The annotation files will reside under the corresponding directory
// names specified in the comments on the right.
//
// For e.g., BOUNDING_BOX_2D annotations reside under
// bounding_box_2d/*.json
enum AnnotationType {
  // 2D bounding box annotations on the image
  BOUNDING_BOX_2D = 0;             // bounding_box_2d

  // 3D bounding box annotations on the image or point cloud.
  //
  // Note: Typically, the annotations are provided in the point cloud
  // reference frame, and optionally also added as annotations
  // in the camera's reference frame.
  BOUNDING_BOX_3D = 1;             // bounding_box_3d

  // Semantic segmentation on the image.
  SEMANTIC_SEGMENTATION_2D = 2;    // semantic_segmentation_2d

  // Semantic segmentation on the point cloud.
  SEMANTIC_SEGMENTATION_3D = 3;    // semantic_segmentation_3d

  // Instance segmentation on the image.
  INSTANCE_SEGMENTATION_2D = 4;    // instance_segmentation_2d

  // Instance segmentation on the point cloud.
  INSTANCE_SEGMENTATION_3D = 5;    // instance_segmentation_3d

  // Depth map on image.
  DEPTH = 6;                       // depth

  // 3D Surface normals on the image.
  SURFACE_NORMALS_2D = 13;          // surface_normals_2d

  // 3D Surface normals on the point cloud.
  SURFACE_NORMALS_3D = 7;          // surface_normals_3d

  // 2D Motion vectors on the image.
  // (i.e. 2D optical flow)
  MOTION_VECTORS_2D = 8;           // motion_vectors_2d

  // 3D Motion vectors on the point cloud.
  // (i.e. 3D flow on the point cloud)
  MOTION_VECTORS_3D = 9;           // motion_vectors_2d

  // 2D Key Point on the image.
  KEY_POINT_2D = 10;               // key_point_2d

  // 2D Key Line on the image.
  KEY_LINE_2D = 11;                // key_line_2d

  // 2D Polygon on the image.
  POLYGON_2D = 12;                 // polygon_2d

  // Agent behavior
  AGENT_BEHAVIOR = 14;             // agent_behavior

  // Classification.
  // (i.e. imagenet classification label)
  CLASSIFICATION = 15;             // classification

  // 3D Key Point in sensor space
  KEY_POINT_3D = 16;               // key_point_3d

  // 3D Key Line in sensor space
  KEY_LINE_3D = 17;                // key_line_3d

  // 3D Polygon in sensor space
  POLYGON_3D = 18;                 // polygon_3d
}

// 2D bounding box
message BoundingBox2D {
  // (x, y) is top left corner (in absolute pixel coordinates)
  int32 x = 1;
  int32 y = 2;

  // (w, h) is width and height (in absolute pixel coordinates)
  uint32 w = 3;
  uint32 h = 4;
}


// 2D bounding box annotation for a single instance.
message BoundingBox2DAnnotation {
  // Class identifier (should be in [0, num_classes - 1])
  // For datasets supporting semantic segmentation and detection,
  // num_classes corresponds to the number of segmentation classes.
  // For datasets only supporting detection, this is the number of
  // thing classes.
  uint32 class_id = 1;

  // 2D box
  BoundingBox2D box = 2;

  // Other fields useful for downstream metric computation.
  uint32 area = 3;

  // Refer to crowd box in coco dataset.
  bool iscrowd = 4;

  // Instance identifier
  uint32 instance_id = 5;

  // A map of attribute names to their values.
  // This can be used to stored `agent_behavior` states (i.e., parked car, 
  // pedestrian intent).
  map<string, string> attributes = 6;
}

// 3D bounding box
message BoundingBox3D {
  // 3D Bounding box. Produced by first constructing a box of dimensions
  // width, length, height centered at the origin, then rotating it by the
  // specified quaternion and finally translating the box to the center 
  // coordinate.

  // 6DoF pose of bounding 3D.
  // (Translation is the center point of the box)
  Pose pose = 1;

  // Dimensions of box.
  double width = 2;
  double length = 3;
  double height = 4;

  // Integer (0,1,2,3) indicating occlusion state:
  // 0 = fully visible, 1 = partly occluded
  // 2 = largely occluded, 3 = unknown
  uint32 occlusion = 5;

  // From 0 (non-truncated) to 1 (truncated), where
  // truncated refers to the object leaving image boundaries.
  double truncation = 6;
}

// 3D bounding box annotation.
message BoundingBox3DAnnotation {
  // Class identifier. Should be in range [0, num_classes - 1],
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // 3D box.
  BoundingBox3D box = 2;

  // Instance identifier for this annotation.
  // This needs to be unique to a scene.
  uint32 instance_id = 3;

  // A map of attribute names to their values.
  map<string, string> attributes = 4;

  // Number of LIDAR points in the Bounding Box
  uint32 num_points = 5;

}

// 2D point.
message KeyPoint2D {
  // (x, y) point (in absolute pixel coordinates).
  int32 x = 1;
  int32 y = 2;
}

// 2D point annotation.
message KeyPoint2DAnnotation {
  // Class identifier (should be in [0, num_classes - 1]),
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // 2D point.
  KeyPoint2D point = 2;

  // A map of attribute names to their values.
  map<string, string> attributes = 3;

  // An identifier key. Used to link with other annotations
  // (example: BoundingBox2D) which specify this key in their
  // instance to link to corresponding KeyPoint2DAnnotation.
  string key = 4;
}

// 2D line annotation.
message KeyLine2DAnnotation{
  // Class identifier (should be in [0, num_classes - 1]),
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // 2D line.
  repeated KeyPoint2D vertices = 2;

  // A map of attribute names to their values.
  // Add only key/value pairs that are stored in a project document accessible
  // to project contributors.
  map<string, string> attributes = 3;

  // An identifier key. Used to link with other annotations, which specify
  // this key in their instance to link to corresponding KeyLine2DAnnotation.
  string key = 4;
}

// 2D point for polygon annotation which allows negative coordinate for
// truncated rotated bounding box at the edge of an image because this kind of
// negative coordinate is meaningful.
message PolygonPoint2D {
  // (x, y) point (in absolute pixel coordinates).
  int32 x = 1;
  int32 y = 2;
}

// 2D polygon annotation.
message Polygon2DAnnotation{
  // Class identifier (should be in [0, num_classes - 1]),
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // 2D polygon.
  // Points should be put into this field with counter-clockwise order.
  repeated PolygonPoint2D vertices = 2;

  // A map of attribute names to their values.
  map<string, string> attributes = 3;
}

// Classification annotation.
message ClassificationAnnotation{
  // Class identifier (should be in [0, num_classes - 1]),
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // A map of attribute names to their values.
  map<string, string> attributes = 2;
}

// 3D point.
message KeyPoint3D {
  // (x, y, z) point (in 3D Cartesian coordinates).
  float x = 1;
  float y = 2;
  float z = 3;
}

// 3D point annotation.
message KeyPoint3DAnnotation {
  // Class identifier (should be in [0, num_classes - 1]),
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // 3D point.
  KeyPoint3D point = 2;

  // A map of attribute names to their values.
  // Add only key/value pairs that are stored in a project document accessible
  // to project contributors.
  map<string, string> attributes = 3;

  // An identifier key. Used to link with other annotations, which specify
  // this key in their instance to link to corresponding KeyPoint3DAnnotation.
  string key = 4;
}

// 3D line annotation.
message KeyLine3DAnnotation{
  // Class identifier (should be in [0, num_classes - 1]),
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // 3D line.
  repeated KeyPoint3D vertices = 2;

  // A map of attribute names to their values.
  // Add only key/value pairs that are stored in a project document accessible
  // to project contributors.
  map<string, string> attributes = 3;

  // An identifier key. Used to link with other annotations, which specify
  // this key in their instance to link to corresponding KeyLine3DAnnotation.
  string key = 4;
}

message PolygonPoint3D {
  // (x, y, z) point (in 3D Cartesian coordinates).
  float x = 1;
  float y = 2;
  float z = 3;
}

// 3D polygon annotation.
message Polygon3DAnnotation{
  // Class identifier (should be in [0, num_classes - 1]),
  // where num_classes is the total number of classes in your ontology.
  uint32 class_id = 1;

  // 3D polygon.
  // Points should be put into this field with counter-clockwise order.
  repeated PolygonPoint3D vertices = 2;

  // A map of attribute names to their values.
  // Add only key/value pairs that are stored in a project document accessible
  // to project contributors.
  map<string, string> attributes = 3;
}


// List of BoundingBox2DAnnotation
message BoundingBox2DAnnotations {
  repeated BoundingBox2DAnnotation annotations = 1;
}

// List of BoundingBox3DAnnotation.
message BoundingBox3DAnnotations {
  repeated BoundingBox3DAnnotation annotations = 1;
}

// List of KeyPoint2DAnnotation.
message KeyPoint2DAnnotations {
  repeated KeyPoint2DAnnotation annotations = 1;
}

// List of KeyLine2DAnnotation.
message KeyLine2DAnnotations {
  repeated KeyLine2DAnnotation annotations = 1;
}

// List of Polygon2DAnnotation.
message Polygon2DAnnotations {
  repeated Polygon2DAnnotation annotations = 1;
}

// List of ClassificationAnnotation.
message ClassificationAnnotations {
  repeated ClassificationAnnotation annotations = 1;
}

// List of KeyPoint3DAnnotation.
message KeyPoint3DAnnotations {
  repeated KeyPoint3DAnnotation annotations = 1;
}

// List of KeyLine3DAnnotation.
message KeyLine3DAnnotations {
  repeated KeyLine3DAnnotation annotations = 1;
}

// List of Polygon3DAnnotation.
message Polygon3DAnnotations {
  repeated Polygon3DAnnotation annotations = 1;
}
