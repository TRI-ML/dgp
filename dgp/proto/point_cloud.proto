// Copyright 2019-2021 Toyota Research Institute.  All rights reserved.
// Definitions for point cloud and point cloud metadata.

syntax = "proto3";

package dgp.proto;

import "google/protobuf/any.proto";

import "dgp/proto/geometry.proto";

// Basic point cloud container for DGP
message PointCloud {
  // Relative file path for the point cloud
  // Supported point cloud formats: compressed numpy (npz) format.
  string filename = 1;

  // PointCloud annotations
  // Maps dgp.proto.AnnotationType (segmentation, instances) to the filename
  // containing the point cloud annotation.
  //
  // Point cloud annotations are written in to compressed numpy arrays (npz)
  // under the 'data' key.
  map<int32, string> annotations = 2;

  // Optional metadata (i.e. miscellaneous enriched annotations)
  // TODO: Support only specific metadata types
  map<string, google.protobuf.Any> metadata = 3;

  // Used to describe the values in the pointcloud.
  // The ChannelType refers to the dtypes of the point cloud
  // stored under the 'data' key.
  enum ChannelType {
    // X, Y, and Z coordinates of point.
    X = 0;
    Y = 1;
    Z = 2;
    // Intensity of return at point.
    INTENSITY = 3;
    // RGB for color.
    R = 4;
    G = 5;
    B = 6;
    // The ring index of this point. This is commonly used for spinning lidar.
    RING = 7;
    NORMAL_X = 8;
    NORMAL_Y = 9;
    NORMAL_Z = 10;
    // Class/Instance ID for point cloud semantic segmentation
    CLASS_ID = 11;
    INSTANCE_ID = 12;
    // Timestamp of this point sample, stored as UTC in microseconds
    TIMESTAMP = 13;
  }

  // Structure of values in the pointcloud file. Each entry in this array specifies
  // the field meaning. A simple pointcloud may simply contain X, Y, and Z channels.
  // This would mean that the numpy data representation of this would be an
  // [N, 3] shape structured array.
  repeated ChannelType point_format = 4;

  // Alternatively, use point fields instead of strongly-typed ChannelType
  // For example, radar data can be represented as D-dimensional tensors/matrices with
  // point_fields describing the columns for the point cloud data
  repeated string point_fields = 5;

  // Ego-pose of this datum with respect to the first sample in the scene.
  Pose pose = 6;
}
