// Copyright 2019-2021 Toyota Research Institute.  All rights reserved.
// Definitions for metadata related to whole datasets and its instances and
// splits.

syntax = "proto3";

package dgp.proto;

import "google/protobuf/any.proto";

import "dgp/proto/remote.proto";
import "dgp/proto/scene.proto";
import "dgp/proto/statistics.proto";


// Dataset ontology
message Ontology {
  // Dictionary maintaining the class name to unique class id mapping
  map<string, int64> name_to_id = 1;
  // Inverted mapping of name_to_id
  map<int64, string> id_to_name = 2;
  // Various look-up tables
  message Color {
    int32 r = 1;
    int32 g = 2;
    int32 b = 3;
  }
  map<int64, Color> colormap = 3;
  map<int64, bool> isthing = 4;
  map<int64, string> supercategory = 5;
  map<int64, int64> segmentation_ids = 6;
  int64 ignore_id = 7;
}


// Dataset Split Enum
enum DatasetSplit {
  TRAIN = 0;
  VAL = 1;
  TEST = 2;
  TRAIN_OVERFIT = 3;
}


// Dataset metadata specific to a particular SceneDataset.
message DatasetMetadata {
  // Dataset name
  string name = 1;

  // Dataset semantic version
  // TODO: Establish semantic versioning.
  string version = 2;

  // Date of dataset creation: yyyy-mm-dd
  // TODO: Change this to datetime
  string creation_date = 3;

  // Dataset creator
  // (for e.g., unique email address: john.doe@domain.com)
  string creator = 4;

  // Remote path to DGP-compliant dataset (s3://<bucket>/)
  RemotePath bucket_path = 5;

  // Remote path to the raw dataset (s3://<bucket>/bdd100k/)
  RemotePath raw_path = 6;

  // Short description of the dataset (~200 characters)
  string description = 7;

  // Dataset origin identifier (i.e. whether the dataset originated
  // internally or from the public domain)
  enum DatasetOrigin {
    PUBLIC = 0;
    INTERNAL = 1;
  }
  DatasetOrigin origin = 8;

  // List of annotation types supported by the dataset
  // See dgp.proto.AnnotationType in dgp/proto/annotations.proto
  repeated int32 available_annotation_types = 9;

  // (Optional) Dataset-specific statistics
  // This is usually of the TRAIN set.
  DatasetStatistics statistics = 10;

  // (Optional) Sampling rate of the dataset
  // This is used to synchronize different fps from different datasets. 
  float frame_per_second = 11;

  // Container for generic metadata.
  // Metadata of "Any" type is useful in cases where the metadata type is
  // specific to a paricular dataset type. For example, this field can contain:
  // - a bare string which contains structured data like json, yaml, etc.
  // - dataset specific metadata with some proto definition (assuming the
  //   compiled proto is available to both the writer and reader of the dataset.
  google.protobuf.Any metadata = 12;
}

// Scene Dataset
//
// Scenes are stored in the DGP under the following structure:
//  <scene_dataset_name>
//  ├── <scene_name>
//  │   ├── bounding_box_2d
//  │   │   └── ...
//  │   ├── bounding_box_3d
//  │   │   └── ...
//  │   ├── calibration
//  │   │   └── <calibration_hash>.json
//  │   │   └── ...
//  │   ├── ontology
//  │   │   └── <ontology_hash>.json
//  │   │   └── ...
//  │   ├── point_cloud
//  │   │   └── ...
//  │   ├── rgb
//  │   │   └── ...
//  │   ├── agent_tracks
//  │   │   └── agent_track_<hash>.json
//  │   │   └── ...
//  │   ├── agents_slices
//  │   │   └── agent_slice<hash>.json
//  │   │   └── ...
//  |   └── ...
//  │   └── scene_<scene_hash>.json
//  │   └── agent_<agent_hash>.json
//  │   └── map_<agent_hash>.json
//  └── ...
//  └── scene_dataset_v1.0.json
//  └── agents_v1.0.json
//  └── map_elements_v1.0.json
//
message SceneDataset {
  // Dataset-specific metadata
  DatasetMetadata metadata = 1;

  // List of scenes recorded for each split (train/val/test) in this dataset.
  // Note: This corresponds to a particular task in the dataset.
  // Maps <DatasetSplit, Scenes>
  map<int32, SceneFiles> scene_splits = 2;
}

// Road actors in the Scene (Pedestrians, vehicles, etc).
message Agents {
  // Dataset-specific metadata
  DatasetMetadata metadata = 1;

  // List of SceneAgents recorded for each split (train/val/test) in this dataset.
  // Note: This corresponds to a particular task in the dataset.
  // Maps <DatasetSplit, SceneAgents>
  map<int32, AgentFiles> agents_splits = 2;
}

// A collection of agent files.
message AgentFiles {
  // Relative file paths for the json files serialized from AgentGroup message.
  //
  // An AgentGroup message is serialized and stored under the following naming convention:
  //    <scene_dir>/agents_<scene_hash>.json
  // where <agents_hash> is the deterministic deterministic SHA1 hash hexdigest of a agentgroup and
  // served as the version of the scene, see dgp.utils.protobuf.generate_uid_from_pbobject
  // for details.
  repeated string filenames = 1;
}